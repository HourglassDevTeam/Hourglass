// 引入相关模块和结构体。
use cerebro_integration::model::{
    instrument::{symbol::Symbol, Instrument},
    Side,
};
use serde::{Deserialize, Serialize};

// 引入订单ID。
use super::order::OrderId;

/// 标准化 [`Trade`]（交易）模型。
#[derive(Clone, PartialEq, PartialOrd, Debug, Deserialize, Serialize)]
pub struct Trade {
    pub id: TradeId,
    pub order_id: OrderId,
    pub instrument: Instrument,
    pub side: Side,
    pub price: f64,
    pub quantity: f64,
    pub fees: SymbolFees,
}

/// [`Trade`] identifier generated by an exchange. Cannot be assume unique.
#[derive(Clone, Eq, PartialEq, Ord, PartialOrd, Hash, Debug, Deserialize, Serialize)]
pub struct TradeId(pub String);

impl<S> From<S> for TradeId
where
    S: Into<String>,
{
    fn from(id: S) -> Self {
        Self(id.into())
    }
}

/// 以 [`Symbol`]（符号）表示的 [`Trade`]（交易）费用。
#[derive(Clone, PartialEq, PartialOrd, Debug, Deserialize, Serialize)]
pub struct SymbolFees {
    pub symbol: Symbol,
    pub fees: f64,
}

impl SymbolFees {
    /// 构造一个新的 [`SymbolFees`]。
    pub fn new<S>(symbol: S, fees: f64) -> Self
    where
        S: Into<Symbol>,
    {
        Self { symbol: symbol.into(), fees }
    }
}
