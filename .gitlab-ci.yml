variables:
  PCF_DEPLOY_REPO: "http://arthur:the17thangel@192.168.110.130/arthur/unilink_execution.git"
  GITEE_REPO: "https://arthur19q3:the17thangel@gitee.com/unilink_1/UniLinkExecution.git"
  PCF_DEPLOY_BRANCH: master
  PCF_COMMIT_USER_NAME: arthur
  PCF_COMMIT_USER_EMAIL: arthur@ciuyat.com
  GIT_STRATEGY: none

stages:
  - mergeCode

mergeCode:
  stage: mergeCode
  script:
    - echo "Starting mergeCode stage"

    - eval $(ssh-agent -s)

    - ssh-add /home/gitlab-runner/.ssh/id_rsa

    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    
        ##
    ## Check if inside a git vault, if not, initialize one
    ##
    - |
      if [ ! -d .git ]; then
        git init
        git remote add origin "$PCF_DEPLOY_REPO"
        git remote add gitee "$GITEE_REPO"
        git commit --allow-empty -m "Initial commit"
        git branch -M $PCF_DEPLOY_BRANCH
      fi
    ##

    ## Configure git
    ##
    - git config --global user.email "$PCF_COMMIT_USER_EMAIL"
    - git config --global user.name "$PCF_COMMIT_USER_NAME"
    - git config pull.rebase false
    
    # ##
    # ## Check if inside a git vault, if not, initialize one
    # ##
    # - |
    #   if [ ! -d .git ]; then
    #     git init
    #     # Create an initial commit to allow pull and push
    #     git commit --allow-empty -m "Initial commit"
    #     git branch -M $PCF_DEPLOY_BRANCH
    #   fi

    ##
    ## Remove existing remotes and add new ones
    ##
    - |
      if git remote | grep -q '^origin$'; then
        git remote remove origin
      fi
      if git remote | grep -q '^gitee$'; then
        git remote remove gitee
      fi
    - git remote add origin "$PCF_DEPLOY_REPO"
    - git remote add gitee "$GITEE_REPO"
    
    ##
    ## Debugging: Print the remotes again to ensure they are set correctly
    ##
    - git remote -v
    - rm -fr ".git/rebase-merge"
    
    ##
    ## Clean up any existing conflicts
    ##
    - |
      if [ -n "$(git ls-files -u)" ]; then
        echo "Cleaning up existing conflicts..."
        git reset --hard HEAD
        git clean -fd
      fi
    
    ##
    ## Fetch and checkout the branch
    ##
    - git fetch origin
    - git fetch gitee
    - git checkout -B $PCF_DEPLOY_BRANCH origin/$PCF_DEPLOY_BRANCH
    
    ##
    ## Pull from origin and handle conflicts
    ##
    - git pull origin $PCF_DEPLOY_BRANCH || true
    - |
      if [ -n "$(git ls-files -u)" ]; then
        git ls-files -u | cut -f 2 | sort -u | while read file; do
          if [ ! -f "$file" ]; then
            git rm "$file"
          else
            git checkout --ours "$file"
            git add "$file"
          fi
        done
        git commit -m "Resolved merge conflicts by choosing local changes from origin"
      fi

    ##
    ## Pull from gitee and handle conflicts, always preferring origin changes
    ##
    - git pull gitee $PCF_DEPLOY_BRANCH || true
    - |
      if [ -n "$(git ls-files -u)" ]; then
        git ls-files -u | cut -f 2 | sort -u | while read file; do
          if [ "$(git status --porcelain | grep "$file" | grep -o 'D')" = "D" ]; then
            git rm "$file"
          else
            git checkout --ours "$file"
            git add "$file"
          fi
        done
        git commit -m "Resolved merge conflicts by choosing origin changes over gitee"
      fi

    ##
    ## Check if there are changes to push to origin
    ##
    - |
      if [ -z "$(git status --porcelain)" ]; then
        echo "No changes to push to origin"
      else
        echo "Pushing changes to origin"
        git push origin $PCF_DEPLOY_BRANCH
      fi
    
    
    ## Force push changes to gitee
    ##
    - git push -f gitee $PCF_DEPLOY_BRANCH

  tags:
    - sync_task
